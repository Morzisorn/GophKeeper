// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/protos/data/credentials.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataController_StoreCredentials_FullMethodName  = "/data.DataController/StoreCredentials"
	DataController_GetCredentials_FullMethodName    = "/data.DataController/GetCredentials"
	DataController_EditCredentials_FullMethodName   = "/data.DataController/EditCredentials"
	DataController_DeleteCredentials_FullMethodName = "/data.DataController/DeleteCredentials"
)

// DataControllerClient is the client API for DataController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataControllerClient interface {
	StoreCredentials(ctx context.Context, in *StoreCredentialsRequest, opts ...grpc.CallOption) (*StoreCredentialsResponse, error)
	GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	EditCredentials(ctx context.Context, in *EditCredentialsRequest, opts ...grpc.CallOption) (*EditCredentialsResponse, error)
	DeleteCredentials(ctx context.Context, in *DeleteCredentialsRequest, opts ...grpc.CallOption) (*DeleteCredentialsResponse, error)
}

type dataControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataControllerClient(cc grpc.ClientConnInterface) DataControllerClient {
	return &dataControllerClient{cc}
}

func (c *dataControllerClient) StoreCredentials(ctx context.Context, in *StoreCredentialsRequest, opts ...grpc.CallOption) (*StoreCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreCredentialsResponse)
	err := c.cc.Invoke(ctx, DataController_StoreCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataControllerClient) GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, DataController_GetCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataControllerClient) EditCredentials(ctx context.Context, in *EditCredentialsRequest, opts ...grpc.CallOption) (*EditCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCredentialsResponse)
	err := c.cc.Invoke(ctx, DataController_EditCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataControllerClient) DeleteCredentials(ctx context.Context, in *DeleteCredentialsRequest, opts ...grpc.CallOption) (*DeleteCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCredentialsResponse)
	err := c.cc.Invoke(ctx, DataController_DeleteCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataControllerServer is the server API for DataController service.
// All implementations must embed UnimplementedDataControllerServer
// for forward compatibility.
type DataControllerServer interface {
	StoreCredentials(context.Context, *StoreCredentialsRequest) (*StoreCredentialsResponse, error)
	GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
	EditCredentials(context.Context, *EditCredentialsRequest) (*EditCredentialsResponse, error)
	DeleteCredentials(context.Context, *DeleteCredentialsRequest) (*DeleteCredentialsResponse, error)
	mustEmbedUnimplementedDataControllerServer()
}

// UnimplementedDataControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataControllerServer struct{}

func (UnimplementedDataControllerServer) StoreCredentials(context.Context, *StoreCredentialsRequest) (*StoreCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCredentials not implemented")
}
func (UnimplementedDataControllerServer) GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedDataControllerServer) EditCredentials(context.Context, *EditCredentialsRequest) (*EditCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCredentials not implemented")
}
func (UnimplementedDataControllerServer) DeleteCredentials(context.Context, *DeleteCredentialsRequest) (*DeleteCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredentials not implemented")
}
func (UnimplementedDataControllerServer) mustEmbedUnimplementedDataControllerServer() {}
func (UnimplementedDataControllerServer) testEmbeddedByValue()                        {}

// UnsafeDataControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataControllerServer will
// result in compilation errors.
type UnsafeDataControllerServer interface {
	mustEmbedUnimplementedDataControllerServer()
}

func RegisterDataControllerServer(s grpc.ServiceRegistrar, srv DataControllerServer) {
	// If the following call pancis, it indicates UnimplementedDataControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataController_ServiceDesc, srv)
}

func _DataController_StoreCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataControllerServer).StoreCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataController_StoreCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataControllerServer).StoreCredentials(ctx, req.(*StoreCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataController_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataControllerServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataController_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataControllerServer).GetCredentials(ctx, req.(*GetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataController_EditCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataControllerServer).EditCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataController_EditCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataControllerServer).EditCredentials(ctx, req.(*EditCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataController_DeleteCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataControllerServer).DeleteCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataController_DeleteCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataControllerServer).DeleteCredentials(ctx, req.(*DeleteCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataController_ServiceDesc is the grpc.ServiceDesc for DataController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.DataController",
	HandlerType: (*DataControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreCredentials",
			Handler:    _DataController_StoreCredentials_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _DataController_GetCredentials_Handler,
		},
		{
			MethodName: "EditCredentials",
			Handler:    _DataController_EditCredentials_Handler,
		},
		{
			MethodName: "DeleteCredentials",
			Handler:    _DataController_DeleteCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/data/credentials.proto",
}
